(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{364:function(t,a,v){"use strict";v.r(a);var _=v(25),r=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"java-1-jvm은-무엇이며-자바코드는-어떻게-실행하는-것인가"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-1-jvm은-무엇이며-자바코드는-어떻게-실행하는-것인가"}},[t._v("#")]),t._v(" (JAVA)1. JVM은 무엇이며 자바코드는 어떻게 실행하는 것인가?")]),t._v(" "),v("h3",{attrs:{id:"목표"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#목표"}},[t._v("#")]),t._v(" 목표")]),t._v(" "),v("ul",[v("li",[t._v("자바 소스 파일(.java)을 JVM으로 실행하는 과정 이해하기")])]),t._v(" "),v("h3",{attrs:{id:"학습할-것"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#학습할-것"}},[t._v("#")]),t._v(" 학습할 것")]),t._v(" "),v("ul",[v("li",[t._v("JVM이란 무엇인가")]),t._v(" "),v("li",[t._v("컴파일 하는 방법")]),t._v(" "),v("li",[t._v("실행하는 방법")]),t._v(" "),v("li",[t._v("바이트코드란 무엇인가")]),t._v(" "),v("li",[t._v("JIT 컴파일러란 무엇이며 어떻게 동작하는지")]),t._v(" "),v("li",[t._v("JVM 구성 요소")]),t._v(" "),v("li",[t._v("JDK와 JRE의 차이")])]),t._v(" "),v("hr"),t._v(" "),v("h2",{attrs:{id:"_1-jvm이란-무엇인가"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-jvm이란-무엇인가"}},[t._v("#")]),t._v(" 1. JVM이란 무엇인가?")]),t._v(" "),v("p",[t._v("JVM이란 Java Virtual Machine, 자바 가상 머신의 약자를 따서 줄여 부르는 용어이다. JVM의 역할은 자바 애플리케이션을 클래스 로더를 통해 읽어 들여 자바 API와 함께 실행하는 것이다. 그리고 JVM은 JAVA와 OS사이에서 중개자 역할을 수행하여 "),v("strong",[t._v("OS에 구애받지 않고 재사용을 가능하게 해준다.")]),t._v(" ( 마이크로소프트 윈도우(95/98/NT), 리눅스, 유닉스, OS X 등 대부분의 운영 체제는 물론, 인터넷 익스플로러와 넷스케이프 등과 같은 웹 브라우저 등 여러가지 플랫폼 )")]),t._v(" "),v("h2",{attrs:{id:"_1-1-jvm의-특징"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-jvm의-특징"}},[t._v("#")]),t._v(" 1.1 JVM의 특징")]),t._v(" "),v("ul",[v("li",[t._v("스택 기반의 가상 머신: 대표적인 컴퓨터 아키텍처인 인텔 x86 아키텍처나 ARM 아키텍처와 같은 하드웨어가 레지스터 기반으로 동작하는 데 비해 "),v("strong",[t._v("JVM은 스택 기반")]),t._v("으로 동작한다.")]),t._v(" "),v("li",[t._v("심볼릭 레퍼런스: 기본 자료형(primitive data type)을 제외한 모든 타입(클래스와 인터페이스)을 "),v("strong",[t._v("명시적인 메모리 주소 기반의 레퍼런스가 아니라 심볼릭 레퍼런스를 통해 참조")]),t._v("한다.")]),t._v(" "),v("li",[v("strong",[t._v("가비지 컬렉션(garbage collection)")]),t._v(": 클래스 인스턴스는 사용자 코드에 의해 명시적으로 생성되고 가비지 컬렉션에 의해 자동으로 파괴된다.")]),t._v(" "),v("li",[t._v("기본 자료형을 명확하게 정의하여 플랫폼 독립성 보장: C/C++ 등의 전통적인 언어는 플랫폼에 따라 int 형의 크기가 변한다. "),v("strong",[t._v("JVM은 기본 자료형을 명확하게 정의하여 호환성을 유지하고 플랫폼 독립성을 보장")]),t._v("한다.")]),t._v(" "),v("li",[v("strong",[t._v("네트워크 바이트 오더(network byte order)")]),t._v(": 자바 클래스 파일은 네트워크 바이트 오더를 사용한다. 인텔 x86 아키텍처가 사용하는 리틀 엔디안이나, RISC 계열 아키텍처가 주로 사용하는 빅 엔디안 사이에서 "),v("strong",[t._v("플랫폼 독립성을 유지하려면 고정된 바이트 오더를 유지")]),t._v("해야 하므로 네트워크 전송 시에 사용하는 바이트 오더인 네트워크 바이트 오더를 사용한다. "),v("strong",[t._v("네트워크 바이트 오더는 빅 엔디안")]),t._v("이다.")])]),t._v(" "),v("h2",{attrs:{id:"_2-컴파일-하는-방법"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-컴파일-하는-방법"}},[t._v("#")]),t._v(" 2. 컴파일 하는 방법")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("자바 언어로 작성된 코드를 JVM이 인식 할 수 있는 JVM 명령어코드(바이트코드)로 변환하는 것을 의미한다.")])]),t._v(" "),v("li",[v("p",[t._v("자바 코드를 자바 언어 스펙에 따라 분석/검증하고 JVM 스펙의 class 파일 구조에 맞는 바이트코드를 만들어내는 과정")])])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("$javac MainTest.java\n")])])]),v("h2",{attrs:{id:"_3-실행하는-방법"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-실행하는-방법"}},[t._v("#")]),t._v(" 3. 실행하는 방법")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("$java MainTest\n")])])]),v("p",[t._v("3.1 자바프로그램 실행과정")]),t._v(" "),v("p",[t._v("1. 프로그램이 실행되면 JVM은 OS로부터 이 프로그램이 필요로 하는 메모리르 할당받는다.")]),t._v(" "),v("p",[t._v("2. 자바 컴파일러(javac)가 자바 소스코드(.java)를 읽어들여 자바 바이트코드(.class)로 변환시킨다.")]),t._v(" "),v("p",[t._v("3. Class Loader 를 통해 class 파일들을 JVM 으로 로딩한다.")]),t._v(" "),v("p",[t._v("4. 로딩된 class 파일들은 Excution engine 을 통해 해석된다.")]),t._v(" "),v("p",[t._v("5. 해석된 바이트코드는 Runtine Data Area 에 배치되어 실질적인 수행이 이루어지게 된다.")]),t._v(" "),v("p",[v("img",{attrs:{src:"/img1.daumcdn.png",alt:"Alt text"}}),t._v(" "),v("img",{attrs:{src:"/img1.daumcdn-1.png",alt:"Alt text"}})]),t._v(" "),v("h2",{attrs:{id:"_4-바이트코드란-무엇인가"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-바이트코드란-무엇인가"}},[t._v("#")]),t._v(" 4. 바이트코드란 무엇인가?")]),t._v(" "),v("p",[t._v("자바 바이트 코드는 "),v("strong",[t._v("자바 가상 머신이 이해할 수 있는 언어로 변환된 자바 소스 코드를 의미")]),t._v("합니다.")]),t._v(" "),v("p",[t._v("자바 컴파일러에 의해 변환되는 코드의 명령어 크기가 1byte라서 자바 바이트 코드라고 불리고 있습니다.")]),t._v(" "),v("p",[v("strong",[t._v("자바 바이트 코드의 확장자는 .class 입니다.")])]),t._v(" "),v("p",[t._v("자바 바이트 코드는 자바 가상 머신만 설치되어 있으면, 어떤 운영체제에서라도 실행될 수 있습니다.")]),t._v(" "),v("h2",{attrs:{id:"_5-jvm-구성요소"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-jvm-구성요소"}},[t._v("#")]),t._v(" 5. JVM 구성요소")]),t._v(" "),v("p",[v("img",{attrs:{src:"/img1.daumcdn-2.png",alt:"Alt text"}})]),t._v(" "),v("h3",{attrs:{id:"class-loader-클래스-로더"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#class-loader-클래스-로더"}},[t._v("#")]),t._v(" - Class Loader(클래스 로더)")]),t._v(" "),v("p",[t._v("JVM내로 클래스(.class)를 로드하고, 링크를 통해 배치하는 작업을 수행하는 모듈이다. Runtime 시에 동적으로 클래스를 로드한다.")]),t._v(" "),v("p",[t._v("jar 파일 내 저장된 클래들을 JVM위에 탑재하고 사용하지 않는 클래스들은 메모리에서 삭제한다.  "),v("strong",[t._v("클래스를 처음으로 참조할 때, 해당 클래스를 로드하고 링크한다.")])]),t._v(" "),v("h3",{attrs:{id:"execution-engine"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#execution-engine"}},[t._v("#")]),t._v(" - Execution Engine")]),t._v(" "),v("p",[v("strong",[t._v("클래스 로더에 의해 메모리에 적재된 클래스(바이트코드)들을 기계어로 변경해 명령어 단위로 실행하는 역할을 한다.")])]),t._v(" "),v("p",[t._v("명령어를 하나 하나 실행하는 인터프리터(Interpreter)방식이 있고 JIT(Just-in-Time) 컴파일러를 이용하는 방식이 있다.")]),t._v(" "),v("p",[t._v("1 ) Interpterter")]),t._v(" "),v("p",[t._v("자바 바이트코드를 명령어 단위로 읽어서 실행한다. ( 한줄씩 수행하기 때문에 느리다. )")]),t._v(" "),v("p",[t._v("2 ) JIT")]),t._v(" "),v("p",[t._v("인터프리터 방식의 단점을 보완하기 위해 도입된 방식으로 인터프리터 방식으로 실행하다가 적절한 시점에 바이트코드 전체를 컴파일하여 네이티브 코드로 변경하고, 이후에는 더 이상 인터프리팅 하지 않고 네이티브 코드로 직접 실행하는 방식이다. 네이티브 코드는 캐시에 보관하기 때문에 한 번 컴파일된 코드는 빠르게 수행하게 된다. 물론 JIT 컴파일러가 컴파일 하는 과정은 바이트코드를 인터프리팅하는 것보다 훨씬 오래 걸리므로 한 번만 실행되는 코드라면 컴파일하지 않고 인터프리팅하는 것이 유리하다.")]),t._v(" "),v("h3",{attrs:{id:"garbage-colector"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#garbage-colector"}},[t._v("#")]),t._v(" - Garbage Colector")]),t._v(" "),v("p",[t._v("**Heap 메모리 영역에 생성된 객체들 중 참조되지 않는 객체들을 탐색 후 제거하는 역할을 한다.  **GC가 역할을 하는 시간은 정확히 언제인지를 알 수 없다. ( 참조가 없어지자마자 해제되는 것을 보장하지 않음 )")]),t._v(" "),v("p",[t._v("**또 다른 특징은 GC가 수행되는 동안 GC를 수행하는 쓰레드가 아닌 다른 모든 쓰레드가 일시정지 된다. **")]),t._v(" "),v("p",[t._v("특히 Full GC가 일어나서 수 초간 모든 쓰레드가 정지한다면 장애로 이어지는 치명적인 문제가 발생 할 수 있다.")]),t._v(" "),v("h3",{attrs:{id:"runtime-data-area"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#runtime-data-area"}},[t._v("#")]),t._v(" - Runtime Data Area")]),t._v(" "),v("p",[v("img",{attrs:{src:"/img1.daumcdn-3.png",alt:"Alt text"}})]),t._v(" "),v("ol",[v("li",[t._v("PC Register")])]),t._v(" "),v("p",[t._v("Thread 가 시작될 때 생성되며 생성될 때마다 생성되는 공간으로 **스레드 마다 하나씩 존재한다. **현재 스레드가 실행되는 부분의 주소와 명령을 저장하고 있는 영역이다. 이것을 이용해서 스레드를 돌아가면서 수행할 수 있게한다.")]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("JVM 스택영역")])]),t._v(" "),v("p",[t._v("프로그램 실행과정에서 임시로 할당되었다가 메소드를 빠져나가면 바로 소멸되는 특성의 데이터를 저장하기 위한 영역이다.")]),t._v(" "),v("p",[t._v("메소드 호출 시 마다 각각의 스택이 생성된다.")]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("Native method 스택")])]),t._v(" "),v("p",[t._v("자바 프로그램이 컴파일되어 생성되는 바이트 코드가 아닌 "),v("strong",[t._v("실제 실행할 수 있는 기계어로 작성된 프로그램을 실행시키는 영역")]),t._v("이다.")]),t._v(" "),v("p",[t._v("자바 외 언어로 작성된 네이티브 코드를 위한 메모리 영역으로 보통 C/C++등의 코드를 수행하기 위한 스택이다.")]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("Method Area ( = Class area = Static area )")])]),t._v(" "),v("p",[v("strong",[t._v("클래스 정보")]),t._v("를 처음 메모리 공간에 올릴 때 **초기화 되는 대상을 저장하기 위한 메모리 공간.  **클래스 멤버 변수의 이름,데이터 타입, 접근 제어자 정보같은 필드 정보와 메소드의 이름, 리턴 타입, 파라미터, 접근 제어자 정보같은 메소드 정보등이 생성")]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("Heap 영역")])]),t._v(" "),v("p",[v("strong",[t._v("객체를 저장하는 가상 메모리 공간이다.")]),t._v(" new 연산자로 생성된 객체와 배열을 저장한다. 물론 class area 영역에 올라온 클래스들만 객체로 생성할 수 있다.  GC 가 참조되지 않는 메모리를 확인하고 제거하는 영역이다.")]),t._v(" "),v("h2",{attrs:{id:"_6-jdk-와-jre-의-차이점"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-jdk-와-jre-의-차이점"}},[t._v("#")]),t._v(" 6. JDK 와 JRE 의 차이점")]),t._v(" "),v("p",[v("img",{attrs:{src:"/img1.daumcdn-4.png",alt:"Alt text"}})]),t._v(" "),v("p",[t._v("JDK  ( Java Development Kit , 자바 개발 도구 )  :  JRE 에서 제공하는 "),v("strong",[t._v("실행 환경뿐만 아니라")]),t._v(" 자바 "),v("strong",[t._v("개발에 필요한")]),t._v(" 여러 가지 명령어 그리고 "),v("strong",[t._v("컴파일러를 포함")])]),t._v(" "),v("p",[t._v("JRE ( Java Runtime Environment, 자바 실행 환경 ) : 자바 애플리케이션을 "),v("strong",[t._v("실행하기 위한 최소의 실행 환경")])]),t._v(" "),v("h4",{attrs:{id:"내용-출처-참고"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#내용-출처-참고"}},[t._v("#")]),t._v(" < 내용 출처&참고 >")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://jeong-pro.tistory.com/148",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM 구조와 자바 런타임 메모리 구조 (자바 애플리케이션이 실행될 때 JVM에서 일어나는 일, 과정"),v("OutboundLink")],1),v("br"),t._v(" "),v("a",{attrs:{href:"https://asfirstalways.tistory.com/158",target:"_blank",rel:"noopener noreferrer"}},[t._v("자바가상머신, JVM(Java Virtual Machine)이란 무엇인가?"),v("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);