(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{365:function(t,a,e){"use strict";e.r(a);var i=e(25),s=Object(i.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"java-2-자바-데이터-변수-타입-그리고-배열"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-2-자바-데이터-변수-타입-그리고-배열"}},[t._v("#")]),t._v(" (JAVA)2. 자바 데이터 변수&타입 그리고 배열")]),t._v(" "),e("h3",{attrs:{id:"목표"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#목표"}},[t._v("#")]),t._v(" 목표")]),t._v(" "),e("ul",[e("li",[t._v("자바 프리미티브 타입, 변수 그리고 배열을 사용하는 방법을 익힙니다.")])]),t._v(" "),e("h3",{attrs:{id:"학습할-것"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#학습할-것"}},[t._v("#")]),t._v(" 학습할 것")]),t._v(" "),e("ul",[e("li",[t._v("프리미티브  타입  종류와  값의  범위  그리고  기본  값")]),t._v(" "),e("li",[t._v("프리미티브  타입과  레퍼런스  타입")]),t._v(" "),e("li",[t._v("리터럴")]),t._v(" "),e("li",[t._v("변수  선언  및  초기화하는  방법")]),t._v(" "),e("li",[t._v("변수의  스코프와  라이프타임")]),t._v(" "),e("li",[t._v("타입  변환, 캐스팅  그리고  타입  프로모션")]),t._v(" "),e("li",[t._v("1차  및 2차  배열  선언하기")]),t._v(" "),e("li",[t._v("타입  추론, var")])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"_1-프리미티브-타입과-레퍼런스-타입"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-프리미티브-타입과-레퍼런스-타입"}},[t._v("#")]),t._v(" 1. 프리미티브 타입과 레퍼런스 타입")]),t._v(" "),e("p",[t._v("자바의 데이터 타입은 크게 프리미티브 타입과 레퍼런스 타입으로 나눠집니다.")]),t._v(" "),e("p",[t._v('이 두개 타입의 가장 큰 차이점은 간단하게 "메모리 참조 타입인지?" 입니다. ( C 언어의 포인터 개념 )')]),t._v(" "),e("p",[e("img",{attrs:{src:"/study2-1.png",alt:"Alt text"}})]),t._v(" "),e("ol",[e("li",[t._v("프리미티브 타입 ( Primitive type )")])]),t._v(" "),e("p",[t._v("- 8가지의 타입을 미리 정의하여 제공")]),t._v(" "),e("p",[t._v("- 기본값이 있기 때문에 Null이 존재하지 않는다. 만약 Null 을 넣고 싶다면 래퍼 클래스를 활용한다.")]),t._v(" "),e("p",[t._v("- 실제 값을 저장하는 공간으로 스택메모리에 저장된다.")]),t._v(" "),e("p",[t._v("- 컴파일 시점에 표현 범위를 벗어난 값이 있을 경우 에러를 발생시키는 컴파일 에러가 발생")]),t._v(" "),e("table",{staticStyle:{"border-collapse":"collapse",width:"100%",height:"100%"},attrs:{border:"1"}},[e("tbody",[e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"20%",height:"19px"}},[t._v(" ")]),e("td",{staticStyle:{width:"11.9767%",height:"19px","text-align":"center"}},[e("b",[t._v("타입")])]),e("td",{staticStyle:{width:"15%",height:"19px","text-align":"center"}},[e("b",[t._v("할당 메모리 크기")])]),e("td",{staticStyle:{width:"13.4884%",height:"19px","text-align":"center"}},[e("b",[t._v("기본값")])]),e("td",{staticStyle:{width:"39.5349%",height:"19px","text-align":"center"}},[e("b",[t._v("표현 범위 ")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"20%",height:"19px","text-align":"center"}},[e("b",[t._v("논리형")])]),e("td",{staticStyle:{width:"11.9767%",height:"19px"}},[t._v("boolean")]),e("td",{staticStyle:{width:"15%",height:"19px"}},[t._v("1 byte")]),e("td",{staticStyle:{width:"13.4884%",height:"19px"}},[t._v("false")]),e("td",{staticStyle:{width:"39.5349%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("true, false")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"20%",height:"19px","text-align":"center"},attrs:{rowspan:"4"}},[e("b",[t._v("정수형")])]),e("td",{staticStyle:{width:"11.9767%",height:"19px"}},[t._v("byte")]),e("td",{staticStyle:{width:"15%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("1 byte")])]),e("td",{staticStyle:{width:"13.4884%",height:"19px"}},[t._v("0")]),e("td",{staticStyle:{width:"39.5349%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("-128 ~ 127")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"11.9767%",height:"19px"}},[t._v("short")]),e("td",{staticStyle:{width:"15%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("2 byte")])]),e("td",{staticStyle:{width:"13.4884%",height:"19px"}},[t._v("0")]),e("td",{staticStyle:{width:"39.5349%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("-32,768 ~ 32,767")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"11.9767%",height:"19px"}},[e("b",[t._v("int"),e("br"),t._v("(기본)")])]),e("td",{staticStyle:{width:"15%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("4 byte")])]),e("td",{staticStyle:{width:"13.4884%",height:"19px"}},[t._v("0")]),e("td",{staticStyle:{width:"39.5349%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v(" ")]),e("span",{staticStyle:{color:"#333333"}},[t._v("-2,147,483,648 ~ 2,147,483,647")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"11.9767%",height:"19px"}},[t._v("long")]),e("td",{staticStyle:{width:"15%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("8 byte")])]),e("td",{staticStyle:{width:"13.4884%",height:"19px"}},[t._v("0L")]),e("td",{staticStyle:{width:"39.5349%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("-9,223,372,036,854,775,808")]),e("span",{staticStyle:{color:"#333333"}},[t._v(" ~ "),e("br"),t._v("9,223,372,036,854,775,807")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"20%",height:"19px","text-align":"center"},attrs:{rowspan:"2"}},[e("b",[t._v("실수형")])]),e("td",{staticStyle:{width:"11.9767%",height:"19px"}},[t._v("float")]),e("td",{staticStyle:{width:"15%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("4 byte")])]),e("td",{staticStyle:{width:"13.4884%",height:"19px"}},[t._v("0.0F")]),e("td",{staticStyle:{width:"39.5349%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("(3.4 X 10")]),e("span",[t._v("-38")]),e("span",[t._v(") ~ (3.4 X 10")]),e("span",[t._v("38")]),e("span",[t._v(") 의 근사값")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"11.9767%",height:"19px"}},[e("b",[t._v("double"),e("br"),t._v("(기본)")])]),e("td",{staticStyle:{width:"15%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("8 byte")])]),e("td",{staticStyle:{width:"13.4884%",height:"19px"}},[t._v("0.0")]),e("td",{staticStyle:{width:"39.5349%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("(1.7 X 10")]),e("span",[t._v("-308")]),e("span",[t._v(") ~ (1.7 X 10")]),e("span",[t._v("308")]),e("span",[t._v(") 의 근사값")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"20%",height:"19px","text-align":"center"}},[e("b",[t._v("문자형")])]),e("td",{staticStyle:{width:"11.9767%",height:"19px"}},[t._v("char")]),e("td",{staticStyle:{width:"15%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("2 byte(유니코드)")])]),e("td",{staticStyle:{width:"13.4884%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v(" ")]),e("span",{staticStyle:{color:"#333333"}},[t._v("'\\u0000' ")])]),e("td",{staticStyle:{width:"39.5349%",height:"19px"}},[e("span",{staticStyle:{color:"#333333"}},[t._v(" 0 ~ 65,535")])])])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("래퍼런스 타입 ( Reference type )")])]),t._v(" "),e("p",[t._v("- 프리미티브 타입을 제외한 타입들이 모두 래퍼런스 타입")]),t._v(" "),e("p",[t._v("- 빈 객체를 의미하는 Null 이 존재")]),t._v(" "),e("p",[t._v("- 값이 저장되어 있는 곳의 주소값을 저장하는 공간으로  Heap 메모리에 저장")]),t._v(" "),e("table",{staticStyle:{"border-collapse":"collapse",width:"100%",height:"100%"},attrs:{border:"1"}},[e("tbody",[e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"25%","text-align":"center",height:"19px"}},[e("b",[t._v("타입")])]),e("td",{staticStyle:{width:"25%","text-align":"center",height:"19px"}},[e("b",[t._v("기본값")])]),e("td",{staticStyle:{width:"25%","text-align":"center",height:"19px"}},[e("b",[t._v("할당 메모리 크기")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"25%",height:"19px"}},[t._v("배열(Array)")]),e("td",{staticStyle:{width:"25%",height:"19px","text-align":"center"}},[t._v("Null")]),e("td",{staticStyle:{width:"25%",height:"19px"},attrs:{rowspan:"4"}},[t._v("4 byte ( 객체의 주소값 )")])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"25%",height:"19px"}},[t._v("열거(Enumeration)")]),e("td",{staticStyle:{width:"25%",height:"19px","text-align":"center"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("Null")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"25%",height:"19px"}},[t._v("클래스(Class)")]),e("td",{staticStyle:{width:"25%",height:"19px","text-align":"center"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("Null")])])]),e("tr",{staticStyle:{height:"19px"}},[e("td",{staticStyle:{width:"25%",height:"19px"}},[t._v("인터페이스(Interface)")]),e("td",{staticStyle:{width:"25%",height:"19px","text-align":"center"}},[e("span",{staticStyle:{color:"#333333"}},[t._v("Null")])])])])]),t._v(" "),e("h2",{attrs:{id:"_2-변수-선언-및-초기화하는-방법"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-변수-선언-및-초기화하는-방법"}},[t._v("#")]),t._v(" 2. 변수 선언 및 초기화하는 방법")]),t._v(" "),e("p",[t._v("변수의 초기화 : 변수를 선언한 후 처음으로 값을 저장하는 것")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("int a = 1;\n")])])]),e("p",[t._v("a 는 변수이고, 여기서의 1은 리터럴(literal)이다.")]),t._v(" "),e("p",[t._v("즉, 1과 같이 변하지 않는 데이터( boolean,char,double,long,int,etc.. )를 리터널이라 부른다.")]),t._v(" "),e("h3",{attrs:{id:"_2-1-변수의-초기화-방법"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-변수의-초기화-방법"}},[t._v("#")]),t._v(" 2.1 변수의 초기화 방법")]),t._v(" "),e("p",[t._v("인스턴스 변수는 초기화 하지 않아도 데이터 타입에 맞게 기본값으로 초기화가 되지만 지역변수는 사용하기 전에 꼭 초기화를 시켜줘야 한다.   가능하다면 변수 선언과 동시에 초기화 시켜주는 버릇을 들이는것이 바람직하다.")]),t._v(" "),e("p",[t._v("2.1.1 명시적 초기화")]),t._v(" "),e("p",[t._v("- 변수 선언과 동시에 초기화하는것. 가장 기본적이면서도 간단한 초기화 방법")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Class Pizza{\n    \tprivate double sales = 0.0; // primitive type 클래스 변수의 초기화 \n\tprivate int dough = 1;  // primitive type 인스턴스 변수의 초기화 \n\tTopping topping = new Topping();  // reference type 변수의 초기화\n}\n")])])]),e("h3",{attrs:{id:"_2-1-2-생성자-constructor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-생성자-constructor"}},[t._v("#")]),t._v(" 2.1.2 생성자( Constructor )")]),t._v(" "),e("p",[t._v("자바에서는 객체의 생성과 동시에 인스턴스 변수를 원하는 값으로 초기화할 수 있는 생성자라는 메소드를 제공.")]),t._v(" "),e("p",[t._v("생성자의 이름은 해당 클래스의 이름과 같아야 한다.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("new 키워드를 사용하여 객체를 생성할 때 자동으로 생성자가 호출됩니다.")])]),t._v(" "),e("p",[t._v("< 특징 >")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("생성자는 반환값이 없지만, 반환 타입을 void 형으로 선언하지 않는다.")])]),t._v(" "),e("li",[e("p",[t._v("생성자는 초기화를 위한 데이터를 인수로 전달받을 수 있다.")])]),t._v(" "),e("li",[e("p",[t._v("여러 개의 생성자를 가질 수 있다. ( 메소드 오버로딩이 가능 )")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Class Pizza{\n    private double sales = 0.0; // primitive type 클래스 변수의 초기화 \n    private int dough = 1;  // primitive type 인스턴스 변수의 초기화 \n\t\n    public Pizza() {} // 매개변수가 없는 생성자\n    public Pizza(int dough ) { // 매개변수가 있는 생성자\n    \tthis.dough = dough;\n    }\n}\n")])])]),e("h3",{attrs:{id:"_2-1-2-1-기본-생성자-default-constructor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-1-기본-생성자-default-constructor"}},[t._v("#")]),t._v(" 2.1.2.1 기본 생성자( Default Constructor )")]),t._v(" "),e("p",[t._v("자바 컴파일러는 기본생성자를 기본적으로 제공 한다.  ( Pizza() { } )")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("매개변수를 가지는 생성자를 하나라도 정의 했다면, 기본 생성자는 자동으로 추가되지 않으므로 매개 변수를 가지는 생성자를 정의 한 후 기본 생성자를 호출하면 오류가 발생한다.")])]),t._v(" "),e("h3",{attrs:{id:"_2-1-3-초기화-블럭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-초기화-블럭"}},[t._v("#")]),t._v(" 2.1.3. 초기화 블럭")]),t._v(" "),e("p",[t._v("명시적 초기화 만으로 부족한 경우에 사용한다. 명시적 초기화에서 사용할 수 없는 조건문,반복문,배열,예외처리 등의 명령문을 통해 복잡한 초기화가 가능하다. 초기화 블럭은 클래스 초기화 블럭과 인스턴스 초기화 블럭으로 나뉜다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Class Pizza{\n\t\n    static double sales ;\n    private int dough = 1;  // primitive type 변수의 초기화 \n    \n    \n    static{\n    \t// 클래스 초기화 블럭\n        sales = 0.0;\n    } \n    \n    {  \n    \t// 인스턴스 초기화 블럭\n        this.dough = 4;\n    } \n    \n\t\n}\n")])])]),e("p",[t._v("1) 클래스 초기화 블럭 : 클래스 변수 초기화에 사용 ( 기본값 -> 명시적 초기화 -> 클래스 초기화 블록 순 )")]),t._v(" "),e("p",[t._v("2) 인스턴스 초기화 블럭   ( 기본값 -> 명시적 초기화 -> 인스턴스 초기화 블록 -> 생성자 )")]),t._v(" "),e("p",[t._v("- 인스턴스 변수 초기화에 사용 ( * 생성자 보다 인스턴스 초기화 블럭이 먼저 수행 )")]),t._v(" "),e("ul",[e("li",[t._v("단순히 중괄호({ })만을 사용하여 정의할 수 있다.")])]),t._v(" "),e("p",[t._v("인스턴스 변수의 초기화는 주로 생성성자를 사용하기 때문에 잘 사용되지 않는다. 대신 클래스의 모든 생성자에서 공통으로 수행되어야 하는 코드가 있는 경우 인스턴스 초기화 블럭에 작성하면 코드의 중복을 줄일 수 있다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Class Pizza{\n\t\n    private int dough;  // primitive type 변수의 초기화\n    \n\tstatic{ } // 클래스 초기화 블럭\n        \n    \t{ System.out.println(" Pizza 인스턴스 생성 "); } // 인스턴스 초기화 블럭\n\t\n\t\n\t\n\tpublic Pizza() {\n\t\tthis.dough = 1;  // 생성자에서 초기화\n\t\t//System.out.println(" Pizza 인스턴스 생성 "); \n\t}\n\t\n\tpublic Pizza(int dough ) {\n\t\tthis.dough = dough; \n\t\t//System.out.println(" Pizza 인스턴스 생성 ");\n\t}\n    \n}\n')])])]),e("h2",{attrs:{id:"_3-1차원-2차원-배열-선언하기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1차원-2차원-배열-선언하기"}},[t._v("#")]),t._v(" 3. 1차원/2차원 배열 선언하기")]),t._v(" "),e("p",[t._v("배열(array)이란 같은 타입의 변수들로 이루어진 유한 집합으로, 배열을 구성하는 각각의 값을 배열 요소(element)라고 하며 배열의 위치를 가리키는 숫자를 인덱스(index)라고 한다. ( 인덱스는 언제나 0부터 시작하고 0을 포함한 양의 정수만 가질 수 있다. )")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 1차원 배열 \nint[] array = new int[10]; // 길이가 10인 int 형 배열 선언 및 생성\n\n// 2차원 배열\nint[][] array2 = new int[2][3]; \n\n// 2차원 배열 선언과 동시에 초기화 하는 방법 \nint[][] array3 = {\n    {10,20,30},\n    {40,50,60}\n};\n")])])]),e("p",[t._v("2차원 배열이란 배열의 요소로 1차원 배열을 가지는 배열이다.(  2차원 배열을 나타내는 타입은 따로 없다. )")]),t._v(" "),e("p",[e("img",{attrs:{src:"/study2-2.png",alt:"Alt text"}})]),t._v(" "),e("h2",{attrs:{id:"_4-변수의-스코프-scope-와-라이프-타임"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-변수의-스코프-scope-와-라이프-타임"}},[t._v("#")]),t._v(" 4. 변수의 스코프(scope)와 라이프 타임")]),t._v(" "),e("p",[t._v("스코프(scope)란 변수를 사용할 수 있는 범위를 뜻한다. { } 안에서 변수를 선언했을 경우 영역이 끝나기 전까지는 어디서든 사용이 가능하다.")]),t._v(" "),e("p",[t._v("변수는 선언 위치에 따라 '전역변수'와 '지역변수' 로 나눠진다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Pizza{\n\n    int dough; // 전역변수(객체변수) : 현재 클래스내 어디든 호출이 가능\n    static int sales; // 전역변수(클래스변수) : 다른 클래스에서도 호출이 가능 \n    \n    void Add(){\n    \tint dough = 3; // Add 메소드의 지역변수 \n    }\n}\n")])])]),e("h3",{attrs:{id:"_4-1-라이프-타임"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-라이프-타임"}},[t._v("#")]),t._v(" 4.1 라이프 타임")]),t._v(" "),e("p",[t._v("1) 전역변수")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("클래스변수 : 프로그램이 실행될 때 클래스와 함께 메모리에 로드되는 변수로 프로그램 종료시 삭제 된다.")])]),t._v(" "),e("li",[e("p",[t._v("인스턴스 변수 : 객체를 생성함에 따라 각각의 인스턴스마다 변수의 복사본을 가질 수 있는 변수이며, 객체가 소멸되기 전까지 존재.")])])]),t._v(" "),e("p",[t._v("2) 지역변수")]),t._v(" "),e("ul",[e("li",[t._v("메소드,반복문,생성자 등에서 선언된 변수로 해당 영역 내에서만 사용이 가능하고 해당 범위를 벗어날 경우 삭제된다.")])]),t._v(" "),e("h2",{attrs:{id:"_5-타입변환-type-conversion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-타입변환-type-conversion"}},[t._v("#")]),t._v(" 5. 타입변환 ( type conversion )")]),t._v(" "),e("p",[t._v("하나의 타입을 다른 타입으로 바꾸는 것을 타입 변환이라고 한다. 자바에서는 boolean 형을 제외한 나머지 기본 타입 간의 타입 변환을 자유롭게 할 수 있다.")]),t._v(" "),e("p",[t._v("다른 타입끼리의 연산은 피연산자들을 모두 같은 타입으로 만든 후에 수행되는데, 메모리에서 할당받은 바이트의 크기가 상대적으로 작은 타입에서 큰 타입으로의 타입변환은 생략할 수 있다. 하지만, 메모리에 할당받은 바이트의 크기가 큰 타입에서 작은 타입으로의 타입 변환은 데이터의 손실이 발생하므로 상대적으로 크기가 작은 타입으로 타입변환을 할 경우 컴파일 오류가 발생한다.")]),t._v(" "),e("h3",{attrs:{id:"_1-묵시적-타입변환-자동-타입-변환-promotion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-묵시적-타입변환-자동-타입-변환-promotion"}},[t._v("#")]),t._v(" 1. 묵시적 타입변환(자동 타입 변환 - Promotion )")]),t._v(" "),e("p",[t._v("대입 연산이나 산술 연사에서 컴파일러가 자동으로 수행해주는 타입 변환이다. 자바에서는 데이터 손실이 발생하지 않거나, 데이터의 손실이 최소화되는 방향으로 무시적 타입 변환을 진행한다. 데이터의 손실이 발생하는 대입 연산은 허용하지 않는다.")]),t._v(" "),e("p",[t._v("자동으로 수행하는 타입 변환은 언제나 데이터의 손실이 최소화되는 방향으로 이루어진다.")]),t._v(" "),e("p",[t._v("byte -> short  -> int -> long -> float -> double"),e("br"),t._v("\n              char")]),t._v(" "),e("h3",{attrs:{id:"_2-명시적-타입변환-강제-타입-변환-casting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-명시적-타입변환-강제-타입-변환-casting"}},[t._v("#")]),t._v(" 2. 명시적 타입변환(강제 타입 변환 - Casting )")]),t._v(" "),e("p",[t._v("사용자가 타입 캐스트 연산자를 사용하여 강제적으로 수행하는 타입 변환이다.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("int num1, num2 = 4;\n\ndouble result = num1 / num2;\ndouble result2 = (double)num1 / num2;\n\n// 결과는??\nSystem.out.println(result);\nSystem.out.println(result2);\n")])])]),e("h2",{attrs:{id:"_6-타입추론"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-타입추론"}},[t._v("#")]),t._v(" 6. 타입추론")]),t._v(" "),e("p",[t._v("타입추론이란 코드 작성 다시 타입이 정해지지 않았지만, 컴파일러가 그 타입을 유추하는 것이다.")]),t._v(" "),e("p",[t._v("Java 10 부터 타입추론을 지원하는 var 키워드가 추가되었다.")]),t._v(" "),e("p",[t._v("이 키워드는 local variable 이면서 선언과 동시에 initalizer 가 필수적으로 요구된다.")]),t._v(" "),e("p",[t._v("(자세한 내용 : "),e("a",{attrs:{href:"https://www.baeldung.com/java-10-local-variable-type-inference",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.baeldung.com/java-10-local-variable-type-inference"),e("OutboundLink")],1),t._v(" )")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('String message = "Good Bye, Java 9";\n\n// In Java 10 \n@Test\npublic void whenVarInitWithString_thenGetStringTypeVar() {\n    var message = "Hello, Java 10";\n    assertTrue(message instanceof String);\n}\n')])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("자바7 에서 다이아몬드 연산자라는 방식이 추가되었는데, 자바10에서 나온 var 와 함께 사용하면 컴파일 에러가 발생한다.")])])])}),[],!1,null,null,null);a.default=s.exports}}]);